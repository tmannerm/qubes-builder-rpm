# Generic makefile for Fedora packages build
#
# For "API" documentation check Makefile.generic
#
# Variables supposed to be in component's Makefile.builder:
#  RPM_SPEC_FILES - list of spec files to build
#  RPM_SRC_PACKAGES - list of src.rpm packages to rebuild (if any)
#  USE_DIST_BUILD_TOOLS - if set to 1, use new "mock" build
#
# Extra variables that may influence the build:
#  RPM_BUILD_EXTRA_DEFINES - extra --define=... options to rpm-build (or mock)

### Variables required Makefile.generic
# Use spec files list as PACKAGE_LIST
PACKAGE_LIST = $(strip $(RPM_SPEC_FILES) $(RPM_SRC_PACKAGES))
DIST_BUILD_DIR = /home/user
export REPO_PROXY

ifneq (1,$(NO_ARCHIVE))
# allow Makefile.builder in component to override this value
GIT_TARBALL_NAME ?= $(notdir \
		$(shell [ -r "$(ORIG_SRC)/$(firstword $(RPM_SPEC_FILES))".in ] && \
			$(RPM_PLUGIN_DIR)scripts/query-spec \
			"$(ORIG_SRC)" "$(ORIG_SRC)/$(firstword $(RPM_SPEC_FILES))" "%{SOURCE0}" "$(DIST)"\
			| cut -d ' ' -f 2))
unexport GIT_TARBALL_NAME
endif

### Local variables
RUN_AS_USER = user
ifndef OUTPUT_DIR
OUTPUT_DIR= rpm
endif

RPM_ARCH := $(shell uname -m)

# In RPM_BUILD_DEFINES and RPM_QUERY_DEFINES, use += to allow
# Makefile.builder to define some initial values

ifeq (fedora,$(DISTRIBUTION))
	DIST_VER = $(subst fc,,$(DIST))
	DIST_TAG = $(DIST)

	RPM_BUILD_DEFINES += --define "fedora $(DIST_VER)"
	RPM_QUERY_DEFINES += --define "fedora $(DIST_VER)"

	BUILD_PKG_LIST = build-pkgs-base-fedora.list

ifdef FEDORA_MIRROR
	YUM_OPTS += --setopt=fedora.baseurl=$(patsubst %/,%,$(FEDORA_MIRROR))/releases/$(DIST_VER)/Everything/x86_64/os/ --setopt=fedora.metalink=
	YUM_OPTS += --setopt=updates.baseurl=$(patsubst %/,%,$(FEDORA_MIRROR))/updates/$(DIST_VER)/Everything/x86_64/ --setopt=updates.metalink=
endif

endif

ifeq (centos-stream,$(DISTRIBUTION))
	DIST_VER = $(subst centos-stream,,$(DIST))
	DIST_TAG = el$(DIST_VER)
	RPM_BUILD_DEFINES += --define "centos $(DIST_VER)"
	RPM_BUILD_DEFINES += --define "rhel $(DIST_VER)"

	RPM_QUERY_DEFINES += --define "centos $(DIST_VER)"
	RPM_QUERY_DEFINES += --define "rhel $(DIST_VER)"

	BUILD_PKG_LIST = build-pkgs-base-centos-stream.list
endif

ifeq (centos,$(DISTRIBUTION))
	DIST_VER = $(subst centos,,$(DIST))
	DIST_TAG = el$(DIST_VER)

	RPM_BUILD_DEFINES += --define "centos $(DIST_VER)"
	RPM_BUILD_DEFINES += --define "rhel $(DIST_VER)"

	RPM_QUERY_DEFINES += --define "centos $(DIST_VER)"
	RPM_QUERY_DEFINES += --define "rhel $(DIST_VER)"

	BUILD_PKG_LIST = build-pkgs-base-centos.list

ifdef CENTOS_MIRROR
	YUM_OPTS += --setopt=base.baseurl=$(patsubst %/,%,$(CENTOS_MIRROR))/$(DIST_VER)/os/x86_64 --setopt=base.mirrorlist=
	YUM_OPTS += --setopt=updates.baseurl=$(patsubst %/,%,$(CENTOS_MIRROR))/$(DIST_VER)/updates/x86_64 --setopt=updates.mirrorlist=
	YUM_OPTS += --setopt=extras.baseurl=$(patsubst %/,%,$(CENTOS_MIRROR))/$(DIST_VER)/extras/x86_64 --setopt=extras.mirrorlist=
endif

ifdef EPEL_MIRROR
	YUM_OPTS += --setopt=epel.baseurl=$(patsubst %/,%,$(EPEL_MIRROR))/$(DIST_VER)/x86_64 --setopt=epel.metalink=
endif

endif

ifeq (leap,$(DISTRIBUTION))
	DIST_VER = $(subst lp,,$(DIST))
	DIST_VER := $(shell sed 's/.\{1\}$$/.&/' <<< "$(DIST_VER)")

	RPM_BUILD_DEFINES += --define "opensuse $(DIST_VER)"
	RPM_QUERY_DEFINES += --define "opensuse $(DIST_VER)"

	BUILD_PKG_LIST = build-pkgs-base-opensuse.list

ifdef OPENSUSE_MIRROR
	YUM_OPTS += --setopt=repo-oss.baseurl=$(patsubst %/,%,$(OPENSUSE_MIRROR))/distribution/leap/$(DIST_VER)/repo/oss --setopt=repo-oss.metalink=
	YUM_OPTS += --setopt=repo-oss-updates.baseurl=$(patsubst %/,%,$(OPENSUSE_MIRROR))/update/leap/$(DIST_VER)/oss --setopt=repo-oss-updates.metalink=
	YUM_OPTS += --setopt=repo-sle-updates.baseurl=$(patsubst %/,%,$(OPENSUSE_MIRROR))/update/leap/$(DIST_VER)/sle --setopt=repo-sle-updates.metalink=
endif

endif

RPM_BUILD_DEFINES += --define "dist .$(DIST_TAG)"
RPM_QUERY_DEFINES += --define "dist .$(DIST_TAG)"

BUILDINFO_SIGN_CMD ?= $(shell rpm --eval %{__gpg})
BUILDINFO_SIGN_CMD += --clearsign
unexport BUILDINFO_SIGN_CMD
RPMSIGN_OPTS ?=
RPMSIGN_OPTS += --digest-algo=sha256
ifneq (,$(SIGN_KEY))
BUILDINFO_SIGN_CMD += --local-user $(SIGN_KEY)
RPMSIGN_OPTS += --key-id=$(SIGN_KEY)
endif

ifdef REPO_PROXY
	YUM_OPTS += --setopt=proxy=$(REPO_PROXY)
endif

### Private "functions"

# List packages produced by given spec file(s)

# this '[ -n "$(1)" ] && ' is to suppress "call" at function definition
spec_packages = $(shell cd $(ORIG_SRC) && [ -n "$(1)" ] && \
	if [ 0`stat -c %Y $(OUTPUT_DIR)/$(notdir $(1)).list 2>/dev/null` -ge \
			0`git log -1 --pretty=format:%ct` ]; then \
		cat $(OUTPUT_DIR)/$(notdir $(1)).list; \
	else \
		$(RPM_PLUGIN_DIR)scripts/query-spec . "$(1)" "$(RPM_QUERY_FORMAT)" "$(DIST)" 2>/dev/null; \
	fi)
unexport spec_packages
srpm_packages = $(shell cd $(ORIG_SRC) && [ -n "$(1)" ] && \
	if [ 0`stat -c %Y $(OUTPUT_DIR)/$(notdir $(1)).list 2>/dev/null` -ge \
			0`git log -1 --pretty=format:%ct` ]; then \
		cat $(OUTPUT_DIR)/$(notdir $(1)).list; \
	else \
		rpm2cpio $(1) |cpio -i --to-stdout '*.spec' 2>/dev/null | \
		$(RPM_PLUGIN_DIR)scripts/query-spec . /dev/stdin "$(RPM_QUERY_FORMAT)" "$(DIST)" 1>&2; \
	fi)
unexport srpm_packages

%.spec: %.spec.in $(wildcard $(DIST_SRC)/version) $(wildcard $(DIST_SRC)/rel)
	$(RPM_PLUGIN_DIR)scripts/generate-spec $(ORIG_SRC) $< $@

dist-prep:
	${Q}true

# Common target with Makefile-mock.rpmbuilder and Makefile-legacy.rpmbuilder for
# generating the spec file
dist-build-dep: $(CHROOT_DIR)$(DIST_SRC)/$(PACKAGE)

ifdef INCREMENT_DEVEL_VERSIONS
dist-package: devel_ver_path = $(ORIG_SRC)/$(OUTPUT_DIR)/$(notdir $(PACKAGE)).devel
dist-package: devel_ver_prev = $(shell cat $(devel_ver_path) 2>/dev/null)
dist-package: devel_ver := $(shell expr $(devel_ver_prev) + 1)
dist-package: RPM_BUILD_DEFINES += --define "dist .$(devel_ver).$(DIST_TAG)"
dist-package: RPM_QUERY_DEFINES += --define "dist .$(devel_ver).$(DIST_TAG)"
endif

dist-package: RPM_BUILD_DEFINES += $(RPM_BUILD_EXTRA_DEFINES)
dist-package: dist-package-build

ifeq (1,$(USE_DIST_BUILD_TOOLS))
include $(RPM_PLUGIN_DIR)Makefile-mock.rpmbuilder
else ifeq (0,$(or $(USE_DIST_BUILD_TOOLS),0))
include $(RPM_PLUGIN_DIR)Makefile-legacy.rpmbuilder
else
$(error bad value for $$(USE_DIST_BUILD_TOOLS) (must be 1, 0, or empty string))
endif

# dist-package-build and dist-copy-out defined in Makefile-*.rpmbuilder included above

### Additional targets

# Copies requested packages (based on PACKAGE_SET, COMPONENT, DIST) to
# requested repository (UPDATE_REPO)
# Optionally saves list of copied packages in $(SNAPSHOT_FILE)
unexport packages
update-repo: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
update-repo: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
update-repo: update-repo-do

update-repo-do:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
ifeq (,$(PACKAGE_LIST))
	${Q}true
else
	${Q}mkdir -p $(UPDATE_REPO)/rpm
	${Q}if [ -n "$(strip $(packages))" ]; then \
		cd $(ORIG_SRC) && ln -f $(packages) $(UPDATE_REPO)/rpm/; \
	else \
		echo "`tput bold`No packages defined by $(PACKAGE_LIST), syntax error?`tput sgr0`"; \
		exit 1; \
	fi
endif
ifdef SNAPSHOT_FILE
	${Q}cd $(ORIG_SRC) && echo $(packages) > $(SNAPSHOT_FILE)
endif

update-repo-from-snapshot: packages = $(shell cat $(SNAPSHOT_FILE) 2>/dev/null)
update-repo-from-snapshot: update-repo-from-snapshot-do

update-repo-from-snapshot-do:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	for f in $(packages); do \
		ln -f $(subst /$(TARGET_REPO)/,/$(SNAPSHOT_REPO)/,$(UPDATE_REPO)/)rpm/`basename $$f` $(UPDATE_REPO)/rpm/ || exit 1; \
	done

sign-prep: rpmsign_client := $(if $(GNUPG),$(GNUPG),$(shell rpm --eval %{__gpg}))
sign-prep:
	${Q}if [ -n "$(rpmsign_client)" ]; then \
		mkdir -p $(BUILDER_DIR)/keyrings/rpmdb; \
		tmpname=$$(mktemp); \
		$(rpmsign_client) --armor --export "$(SIGN_KEY)" > "$$tmpname"; \
		rpmkeys --dbpath=$(BUILDER_DIR)/keyrings/rpmdb --import "$$tmpname"; \
		rm -f "$$tmpname"; \
	fi

sign: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
sign: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
sign: sign-prep
ifeq (,$(PACKAGE_LIST))
	${Q}true
else
# buildinfo should be the last on the list, so update-rpmbuildinfo will
# collect hashes of already signed packages
	${Q}cd $(ORIG_SRC) && for pkg in $(packages); do \
		if [ "$${pkg##*.}" = "buildinfo" ]; then \
			$(RPM_PLUGIN_DIR)scripts/update-rpmbuildinfo "$$pkg" | $(BUILDINFO_SIGN_CMD) > "$$pkg".tmp && \
			mv -f "$$pkg".tmp "$$pkg"; \
		elif [ "$$(rpmkeys --checksig -- "$$pkg")" != "$$pkg: digests signatures OK" ]; then \
			setsid -w rpmsign $(RPMSIGN_OPTS) --addsign $(and $(filter fc25,$(DIST)),--rpmv3) -- "$$pkg" </dev/null || exit 1; \
		fi; \
	done
endif

check-repo: packages  = $(foreach SPEC,$(RPM_SPEC_FILES),$(call spec_packages,$(SPEC)))
check-repo: packages += $(foreach SPEC,$(RPM_SRC_PACKAGES),$(call srpm_packages,$(SPEC)))
check-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	${Q}if [ -n "$(strip $(packages))" ]; then \
		cd $(ORIG_SRC) && ls $(addprefix $(UPDATE_REPO)/rpm/, $(notdir $(packages))) >/dev/null 2>&1 || exit 1; \
	else \
		echo "`tput bold`No packages defined by $(PACKAGE_LIST), syntax error?`tput sgr0`"; \
		exit 1; \
	fi
